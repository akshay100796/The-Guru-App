package com.codexdroid.theguru.ui.activities.registration

import android.content.Intent
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import androidx.activity.OnBackPressedCallback
import androidx.core.content.res.ResourcesCompat
import com.codexdroid.theguru.R
import com.codexdroid.theguru.controllers.adapters.GuruLearningsAdapter
import com.codexdroid.theguru.databinding.ActivityRegisterBinding
import com.codexdroid.theguru.di.room.tables.TableSelf
import com.codexdroid.theguru.ui.activities.home.HomeActivity
import com.codexdroid.theguru.ui.base.BaseActivity
import com.codexdroid.theguru.utility.AppConstants
import com.codexdroid.theguru.utility.Loader
import com.codexdroid.theguru.utility.isValidEmail
import com.codexdroid.theguru.utility.isValidMobile
import com.codexdroid.theguru.utility.requestGeneratePassword
import com.codexdroid.theguru.utility.requestHideKeyboard
import com.codexdroid.theguru.utility.showToast
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.util.Timer
import java.util.TimerTask

/**
 * Copyright (C) [The-Guru] - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 *
 * Created by Akshay Pawar on Â© 31 July 2023, 11:43 PM
 * MH-15, India
 */

class RegisterActivity : BaseActivity<ActivityRegisterBinding, RegisterViewModel>() {


    private var registerAs: String = AppConstants.UserType.MEMBER
    private lateinit var fullName: String
    private lateinit var email: String
    private lateinit var whatsApp: String
    private lateinit var password: String
    private var isPasswordAutoGenerated = false
    private lateinit var timer: Timer

    private val onBackPress: OnBackPressedCallback = object : OnBackPressedCallback(true) {
        override fun handleOnBackPressed() {

            MaterialAlertDialogBuilder(this@RegisterActivity)
                .setTitle(getString(R.string.confirm))
                .setMessage(getString(R.string.message_alert_cancel_registration))
                .setPositiveButton(getString(R.string.text_yes)) { _, _ -> finish() }
                .setNegativeButton(getString(R.string.text_no)){ dialog, _ -> dialog.dismiss() }
                .create().show()
        }
    }

    override fun requestInitialised() {
        super.requestInitialised()
        onBackPressedDispatcher.addCallback(onBackPress)
        requestShowLearningsAdapter()
    }

    override fun requestSetUpListeners() {
        super.requestSetUpListeners()
        requestBinding().idRadioGroup.setOnCheckedChangeListener { _, checkedId ->
            when (checkedId) {
                R.id.id_chip_member -> {
                    registerAs = AppConstants.UserType.MEMBER
                    requestViewModel().requestUpdateRegisterAs(Pair(registerAs, getString(R.string.member_select_desc)))
                }
                R.id.id_chip_admin -> {
                    registerAs = AppConstants.UserType.ADMIN
                    requestViewModel().requestUpdateRegisterAs(Pair(registerAs, getString(R.string.admin_select_desc)))
                }
                else -> {}
            }
        }
        requestBinding().idButtonSwitch.setOnCheckedChangeListener { _, isChecked ->
            requestViewModel().requestUpdatePassword(if(isChecked) Pair(requestGeneratePassword(),true) else Pair("",false))
        }

        requestBinding().idEditWhatsApp.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                if(s.toString().isValidMobile()) requestHideKeyboard(this@RegisterActivity,requestBinding().idEditWhatsApp)
            }
            override fun afterTextChanged(s: Editable?) {}
        })

        requestBinding().idButtonRegister.setOnClickListener {

            fullName = requestBinding().idEditFullName.text.toString()
            email = requestBinding().idEditEmail.text.toString()
            whatsApp = requestBinding().idEditWhatsApp.text.toString()
            password  = requestBinding().idEditPassword.text.toString()

            val isInvalidName = fullName.isEmpty()
            requestViewModel().requestShowError(AppConstants.Errors.NAME, if(isInvalidName) getString(R.string.error_text_name_required) else "")
            if(isInvalidName) return@setOnClickListener

            val isInvalidEmail = !email.isValidEmail()
            requestViewModel().requestShowError(AppConstants.Errors.EMAIL, if(isInvalidEmail) getString(R.string.error_text_invalid_email) else "")
            if (isInvalidEmail) return@setOnClickListener

            val isInvalidWhatsApp = !whatsApp.isValidMobile()
            requestViewModel().requestShowError(AppConstants.Errors.WHATS_APP, if(isInvalidWhatsApp) getString(R.string.error_text_apologized_invalid_mobile) else "")
            if(isInvalidWhatsApp) return@setOnClickListener

            val isInvalidPassword = password.isEmpty() || password.length < 5
            requestViewModel().requestShowError(AppConstants.Errors.PASSWORD, if(isInvalidPassword) getString(R.string.error_text_invalid_password) else "")
            if(isInvalidPassword) return@setOnClickListener

            val tableSelf = TableSelf(registeredAs = registerAs, fullName = fullName, email = email, whatsApp = whatsApp, password = password, autoGenerated = isPasswordAutoGenerated)


            Loader.show(this@RegisterActivity)

            Firebase.firestore.collection(AppConstants.Firestore.COLLECTION_USERS)
                .document(tableSelf.email)
                .get()
                .addOnSuccessListener {result ->
                    result?.data?.let {
                        showToast(this@RegisterActivity, getString(R.string.text_error_email_exists))
                        Loader.hide()
                    } ?: run {
                        //led to register
                        Firebase
                            .firestore
                            .collection(AppConstants.Firestore.COLLECTION_USERS)
                            .document(tableSelf.email)
                            .set(tableSelf)
                            .addOnSuccessListener {
                                Loader.hide()
                                requestRoomViewModel().requestCreateSelf(tableSelf)

                                //get approval from admin

//                                requestPreferenceManager().saveToken(requestToken())
//                                startActivity(Intent(this@RegisterActivity, HomeActivity::class.java))
                                finish()
                            }
                            .addOnFailureListener {
                                showToast(this@RegisterActivity, "Register Fail | ${it.message}")
                            }
                    }
                }
        }
    }

    override fun requestSetUpObserver() {
        super.requestSetUpObserver()
        requestViewModel().registerAs.observe(this) {
            registerAs = it.first
            requestBinding().idTextChipDesc.text = it.second
        }
        requestViewModel().updatePassword.observe(this) {
            isPasswordAutoGenerated = it.second
            requestBinding().idEditPassword.apply {
                setText(it.first)
                isEnabled = !it.second
                background = ResourcesCompat.getDrawable(resources, if(it.second) R.drawable.drf_edit_disable else R.drawable.drf_edit_input_back, null)
            }
        }
    }

    private fun requestShowLearningsAdapter() {
        val learnings= loadLearnings()

        GuruLearningsAdapter(learnings).apply {
            requestBinding().idLearningsViewpager.adapter = this
            timer = Timer()
            timer.scheduleAtFixedRate(object : TimerTask() {
                override fun run() {
                    CoroutineScope(Dispatchers.Main).launch {
                        val totalItems = requestBinding().idLearningsViewpager.adapter?.count ?: 0
                        if(totalItems > 0) {
                            val next = (requestBinding().idLearningsViewpager.currentItem + 1) % totalItems
                            requestBinding().idLearningsViewpager.setCurrentItem(next,true)
                        }
                    }
                }
            },3000,3000)
        }
    }
}